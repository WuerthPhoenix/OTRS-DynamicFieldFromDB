<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>OTRS-DynamicFieldFromDB</Name>
    <Version>1.0.0</Version>
    <Vendor>Wuerth Phoenix S.R.L.</Vendor>
    <URL>http://www.wuerthphoenix.com/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 2, June 1991</License>
    <ChangeLog Version="1.0.0" Date="2012-11-28 12:30:21">First public release.</ChangeLog>
    <Description Lang="en">Adds a new DynamicField Type that permits to load the possible values at runtime from an external DB.</Description>
    <Framework>3.1.x</Framework>
    <IntroInstall Lang="en" Title="Thank you!" Type="post">Thank you for choosing the WP DynamicField From DB.</IntroInstall>
    <BuildDate>2012-11-28 11:36:35</BuildDate>
    <BuildHost>gicsrv.gruppo.autostrade.it</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/DynamicFieldDropdownFromDB.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIxLjAiIGluaXQ9IkNoYW5nZXMiPgoKPENvbmZpZ0l0ZW0gTmFtZT0iRnJvbnRlbmQ6Ok1vZHVsZSMjI0FkbWluRHluYW1pY0ZpZWxkRHJvcGRvd25Gcm9tREIiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+IAo8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+IAo8R3JvdXA+RHluYW1pY0ZpZWxkczwvR3JvdXA+CjxTdWJHcm91cD5Gcm9udGVuZDo6QWRtaW46Ok1vZHVsZVJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CjxTZXR0aW5nPiAKPEZyb250ZW5kTW9kdWxlUmVnPiAKPEdyb3VwPmFkbWluPC9Hcm91cD4KPERlc2NyaXB0aW9uPkFkbWluPC9EZXNjcmlwdGlvbj4KPFRpdGxlIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pYyBGaWVsZHMgRHJvcC1kb3duIEZyb20gREIgQmFja2VuZCBHVUk8L1RpdGxlPgo8TG9hZGVyPgo8Q1NTPkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkLmNzczwvQ1NTPgo8SmF2YVNjcmlwdD5Db3JlLkFnZW50LkFkbWluLkR5bmFtaWNGaWVsZC5qczwvSmF2YVNjcmlwdD4gCjxKYXZhU2NyaXB0PkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkRHJvcGRvd24uanM8L0phdmFTY3JpcHQ+IAo8L0xvYWRlcj4gCjwvRnJvbnRlbmRNb2R1bGVSZWc+CjwvU2V0dGluZz4KPC9Db25maWdJdGVtPgoKPENvbmZpZ0l0ZW0gTmFtZT0iRnJvbnRlbmQ6Ok1vZHVsZSMjI0FkbWluRHluYW1pY0ZpZWxkVGV4dEFyZWFGcm9tREIiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+IAo8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+IAo8R3JvdXA+RHluYW1pY0ZpZWxkczwvR3JvdXA+CjxTdWJHcm91cD5Gcm9udGVuZDo6QWRtaW46Ok1vZHVsZVJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CjxTZXR0aW5nPiAKPEZyb250ZW5kTW9kdWxlUmVnPiAKPEdyb3VwPmFkbWluPC9Hcm91cD4KPERlc2NyaXB0aW9uPkFkbWluPC9EZXNjcmlwdGlvbj4KPFRpdGxlIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pYyBGaWVsZHMgRHJvcC1kb3duIEZyb20gREIgQmFja2VuZCBHVUk8L1RpdGxlPgo8TG9hZGVyPgo8Q1NTPkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkLmNzczwvQ1NTPgo8SmF2YVNjcmlwdD5Db3JlLkFnZW50LkFkbWluLkR5bmFtaWNGaWVsZC5qczwvSmF2YVNjcmlwdD4gCjxKYXZhU2NyaXB0PkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkVGV4dGFyZWEuanM8L0phdmFTY3JpcHQ+IAo8L0xvYWRlcj4gCjwvRnJvbnRlbmRNb2R1bGVSZWc+CjwvU2V0dGluZz4KPC9Db25maWdJdGVtPgoKCjxDb25maWdJdGVtIE5hbWU9IkR5bmFtaWNGaWVsZHM6OkJhY2tlbmQjIyNEcm9wZG93bkZyb21EQiIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pY0ZpZWxkIGJhY2tlbmQgcmVnaXN0cmF0aW9uLjwvRGVzY3JpcHRpb24+CjxHcm91cD5EeW5hbWljRmllbGRzPC9Hcm91cD4KPFN1Ykdyb3VwPkR5bmFtaWNGaWVsZHM6OkJhY2tlbmQ6OlJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+IAo8U2V0dGluZz4gCjxIYXNoPgo8SXRlbSBLZXk9IkRpc3BsYXlOYW1lIiBUcmFuc2xhdGFibGU9IjEiPkRyb3Bkb3duRnJvbURCPC9JdGVtPgo8SXRlbSBLZXk9Ik1vZHVsZSI+S2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6QmFja2VuZDo6RHJvcGRvd25Gcm9tREI8L0l0ZW0+IAo8SXRlbSBLZXk9IkNvbmZpZ0RpYWxvZyI+QWRtaW5EeW5hbWljRmllbGREcm9wZG93bkZyb21EQjwvSXRlbT4gCjwvSGFzaD4gCjwvU2V0dGluZz4KPC9Db25maWdJdGVtPgoKPENvbmZpZ0l0ZW0gTmFtZT0iRHluYW1pY0ZpZWxkczo6QmFja2VuZCMjI1RleHRBcmVhRnJvbURCIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgo8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EeW5hbWljRmllbGQgYmFja2VuZCByZWdpc3RyYXRpb24uPC9EZXNjcmlwdGlvbj4KPEdyb3VwPkR5bmFtaWNGaWVsZHM8L0dyb3VwPgo8U3ViR3JvdXA+RHluYW1pY0ZpZWxkczo6QmFja2VuZDo6UmVnaXN0cmF0aW9uPC9TdWJHcm91cD4gCjxTZXR0aW5nPiAKPEhhc2g+CjxJdGVtIEtleT0iRGlzcGxheU5hbWUiIFRyYW5zbGF0YWJsZT0iMSI+VGV4dEFyZWFGcm9tREI8L0l0ZW0+CjxJdGVtIEtleT0iTW9kdWxlIj5LZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpCYWNrZW5kOjpUZXh0QXJlYUZyb21EQjwvSXRlbT4gCjxJdGVtIEtleT0iQ29uZmlnRGlhbG9nIj5BZG1pbkR5bmFtaWNGaWVsZFRleHRBcmVhRnJvbURCPC9JdGVtPiAKPC9IYXNoPiAKPC9TZXR0aW5nPgo8L0NvbmZpZ0l0ZW0+CgoKPC9vdHJzX2NvbmZpZz4K</File>
        <File Location="Kernel/Output/HTML/Standard/AdminDynamicFieldDropdownFromDB.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminDynamicFieldTextAreaFromDB.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminDynamicFieldDropdownFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminDynamicFieldTextAreaFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/DynamicField/Backend/DropdownFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/DynamicField/Backend/TextAreaFromDB.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
</otrs_package>