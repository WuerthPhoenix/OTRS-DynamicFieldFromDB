<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Wuerth Phoenix DynamicField From DB</Name>
    <Version>1.2.0</Version>
    <Vendor>Wuerth Phoenix S.R.L.</Vendor>
    <URL>http://www.wuerth-phoenix.com/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 2, June 1991</License>
    <ChangeLog Date="2012-04-26 18:45:21" Version="1.0.0">First Release.</ChangeLog>
    <ChangeLog Date="2013-01-07 18:45:21" Version="1.1.0">New DynamicField Backend: MultiselectFromDB.</ChangeLog>
    <ChangeLog Date="2013-01-08 18:45:21" Version="1.1.1">Better error handling on configuration. Local DBObject of otrs now supported.</ChangeLog>
    <ChangeLog Date="2013-01-08 18:45:21" Version="1.1.2">- fixed bug in DisplayValueRender that tried to use missing DBIString when &quot;Store Key and value&quot; was set to &quot;yes&quot; - fixed bug that caused the creation/edit of a ticket to fail when an error message in the DynamicField was displayed - added a 'FromDB' class to identify DynamicFieldsFromDB in dom/css</ChangeLog>
    <ChangeLog Date="2013-02-26 18:45:21" Version="1.1.3">Added Debug mode, added textarea in query field in TextAreaFromDB</ChangeLog>
    <ChangeLog Date="2013-09-17 10:40:21" Version="1.2.0">Merged various fixes from projects. 1.2.0 Tag. </ChangeLog>
    <Description Lang="en">Adds a new DynamicField Type that permits to load the possible values at runtime from an external DB.</Description>
    <Framework>3.2.x</Framework>
    <IntroInstall Lang="en" Title="Thank you!" Type="post">Thank you for choosing the WP DynamicField From DB.</IntroInstall>
    <BuildDate>2013-09-17 15:02:43</BuildDate>
    <BuildHost>yourhost.example.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/DynamicFieldDropdownFromDB.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIxLjAiIGluaXQ9IkNoYW5nZXMiPgoKPENvbmZpZ0l0ZW0gTmFtZT0iRnJvbnRlbmQ6Ok1vZHVsZSMjI0FkbWluRHluYW1pY0ZpZWxkRHJvcGRvd25Gcm9tREIiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+IAo8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+IAo8R3JvdXA+RHluYW1pY0ZpZWxkczwvR3JvdXA+CjxTdWJHcm91cD5Gcm9udGVuZDo6QWRtaW46Ok1vZHVsZVJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CjxTZXR0aW5nPiAKPEZyb250ZW5kTW9kdWxlUmVnPiAKPEdyb3VwPmFkbWluPC9Hcm91cD4KPERlc2NyaXB0aW9uPkFkbWluPC9EZXNjcmlwdGlvbj4KPFRpdGxlIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pYyBGaWVsZHMgRHJvcC1kb3duIEZyb20gREIgQmFja2VuZCBHVUk8L1RpdGxlPgo8TG9hZGVyPgo8Q1NTPkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkLmNzczwvQ1NTPgo8SmF2YVNjcmlwdD5Db3JlLkFnZW50LkFkbWluLkR5bmFtaWNGaWVsZC5qczwvSmF2YVNjcmlwdD4gCjxKYXZhU2NyaXB0PkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkRHJvcGRvd24uanM8L0phdmFTY3JpcHQ+IAo8L0xvYWRlcj4gCjwvRnJvbnRlbmRNb2R1bGVSZWc+CjwvU2V0dGluZz4KPC9Db25maWdJdGVtPgoKPENvbmZpZ0l0ZW0gTmFtZT0iRnJvbnRlbmQ6Ok1vZHVsZSMjI0FkbWluRHluYW1pY0ZpZWxkVGV4dEFyZWFGcm9tREIiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+IAo8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+IAo8R3JvdXA+RHluYW1pY0ZpZWxkczwvR3JvdXA+CjxTdWJHcm91cD5Gcm9udGVuZDo6QWRtaW46Ok1vZHVsZVJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CjxTZXR0aW5nPiAKPEZyb250ZW5kTW9kdWxlUmVnPiAKPEdyb3VwPmFkbWluPC9Hcm91cD4KPERlc2NyaXB0aW9uPkFkbWluPC9EZXNjcmlwdGlvbj4KPFRpdGxlIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pYyBGaWVsZHMgRHJvcC1kb3duIEZyb20gREIgQmFja2VuZCBHVUk8L1RpdGxlPgo8TG9hZGVyPgo8Q1NTPkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkLmNzczwvQ1NTPgo8SmF2YVNjcmlwdD5Db3JlLkFnZW50LkFkbWluLkR5bmFtaWNGaWVsZC5qczwvSmF2YVNjcmlwdD4gCjxKYXZhU2NyaXB0PkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkVGV4dGFyZWEuanM8L0phdmFTY3JpcHQ+IAo8L0xvYWRlcj4gCjwvRnJvbnRlbmRNb2R1bGVSZWc+CjwvU2V0dGluZz4KPC9Db25maWdJdGVtPgoKPENvbmZpZ0l0ZW0gTmFtZT0iRnJvbnRlbmQ6Ok1vZHVsZSMjI0FkbWluRHluYW1pY0ZpZWxkTXVsdGlzZWxlY3RGcm9tREIiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+IAo8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+IAo8R3JvdXA+RHluYW1pY0ZpZWxkczwvR3JvdXA+CjxTdWJHcm91cD5Gcm9udGVuZDo6QWRtaW46Ok1vZHVsZVJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CjxTZXR0aW5nPiAKPEZyb250ZW5kTW9kdWxlUmVnPiAKPEdyb3VwPmFkbWluPC9Hcm91cD4KPERlc2NyaXB0aW9uPkFkbWluPC9EZXNjcmlwdGlvbj4KPFRpdGxlIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pYyBGaWVsZHMgTXVsdGlzZWxlY3QgRnJvbSBEQiBCYWNrZW5kIEdVSTwvVGl0bGU+CjxMb2FkZXI+CjxDU1M+Q29yZS5BZ2VudC5BZG1pbi5EeW5hbWljRmllbGQuY3NzPC9DU1M+CjxKYXZhU2NyaXB0PkNvcmUuQWdlbnQuQWRtaW4uRHluYW1pY0ZpZWxkLmpzPC9KYXZhU2NyaXB0PiAKPEphdmFTY3JpcHQ+Q29yZS5BZ2VudC5BZG1pbi5EeW5hbWljRmllbGREcm9wZG93bi5qczwvSmF2YVNjcmlwdD4gCjwvTG9hZGVyPiAKPC9Gcm9udGVuZE1vZHVsZVJlZz4KPC9TZXR0aW5nPgo8L0NvbmZpZ0l0ZW0+Cgo8Q29uZmlnSXRlbSBOYW1lPSJEeW5hbWljRmllbGRzOjpCYWNrZW5kIyMjRHJvcGRvd25Gcm9tREIiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CjxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkR5bmFtaWNGaWVsZCBiYWNrZW5kIHJlZ2lzdHJhdGlvbi48L0Rlc2NyaXB0aW9uPgo8R3JvdXA+RHluYW1pY0ZpZWxkczwvR3JvdXA+CjxTdWJHcm91cD5EeW5hbWljRmllbGRzOjpCYWNrZW5kOjpSZWdpc3RyYXRpb248L1N1Ykdyb3VwPiAKPFNldHRpbmc+IAo8SGFzaD4KPEl0ZW0gS2V5PSJEaXNwbGF5TmFtZSIgVHJhbnNsYXRhYmxlPSIxIj5Ecm9wZG93bkZyb21EQjwvSXRlbT4KPEl0ZW0gS2V5PSJNb2R1bGUiPktlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkJhY2tlbmQ6OkRyb3Bkb3duRnJvbURCPC9JdGVtPiAKPEl0ZW0gS2V5PSJDb25maWdEaWFsb2ciPkFkbWluRHluYW1pY0ZpZWxkRHJvcGRvd25Gcm9tREI8L0l0ZW0+IAo8L0hhc2g+IAo8L1NldHRpbmc+CjwvQ29uZmlnSXRlbT4KCjxDb25maWdJdGVtIE5hbWU9IkR5bmFtaWNGaWVsZHM6OkJhY2tlbmQjIyNUZXh0QXJlYUZyb21EQiIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pY0ZpZWxkIGJhY2tlbmQgcmVnaXN0cmF0aW9uLjwvRGVzY3JpcHRpb24+CjxHcm91cD5EeW5hbWljRmllbGRzPC9Hcm91cD4KPFN1Ykdyb3VwPkR5bmFtaWNGaWVsZHM6OkJhY2tlbmQ6OlJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+IAo8U2V0dGluZz4gCjxIYXNoPgo8SXRlbSBLZXk9IkRpc3BsYXlOYW1lIiBUcmFuc2xhdGFibGU9IjEiPlRleHRBcmVhRnJvbURCPC9JdGVtPgo8SXRlbSBLZXk9Ik1vZHVsZSI+S2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6QmFja2VuZDo6VGV4dEFyZWFGcm9tREI8L0l0ZW0+IAo8SXRlbSBLZXk9IkNvbmZpZ0RpYWxvZyI+QWRtaW5EeW5hbWljRmllbGRUZXh0QXJlYUZyb21EQjwvSXRlbT4gCjwvSGFzaD4gCjwvU2V0dGluZz4KPC9Db25maWdJdGVtPgoKPENvbmZpZ0l0ZW0gTmFtZT0iRHluYW1pY0ZpZWxkczo6QmFja2VuZCMjI011bHRpc2VsZWN0RnJvbURCIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgo8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EeW5hbWljRmllbGQgYmFja2VuZCByZWdpc3RyYXRpb24uPC9EZXNjcmlwdGlvbj4KPEdyb3VwPkR5bmFtaWNGaWVsZHM8L0dyb3VwPgo8U3ViR3JvdXA+RHluYW1pY0ZpZWxkczo6QmFja2VuZDo6UmVnaXN0cmF0aW9uPC9TdWJHcm91cD4gCjxTZXR0aW5nPiAKPEhhc2g+CjxJdGVtIEtleT0iRGlzcGxheU5hbWUiIFRyYW5zbGF0YWJsZT0iMSI+TXVsdGlzZWxlY3RGcm9tREI8L0l0ZW0+CjxJdGVtIEtleT0iTW9kdWxlIj5LZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpCYWNrZW5kOjpNdWx0aXNlbGVjdEZyb21EQjwvSXRlbT4gCjxJdGVtIEtleT0iSXRlbVNlcGFyYXRvciI+LCA8YnIvPjwvSXRlbT4gCjxJdGVtIEtleT0iQ29uZmlnRGlhbG9nIj5BZG1pbkR5bmFtaWNGaWVsZE11bHRpc2VsZWN0RnJvbURCPC9JdGVtPiAKPC9IYXNoPiAKPC9TZXR0aW5nPgo8L0NvbmZpZ0l0ZW0+CiAKPC9vdHJzX2NvbmZpZz4K</File>
        <File Location="Kernel/Output/HTML/Standard/AdminDynamicFieldDropdownFromDB.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminDynamicFieldTextAreaFromDB.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminDynamicFieldMultiselectFromDB.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminDynamicFieldDropdownFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminDynamicFieldTextAreaFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminDynamicFieldMultiselectFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/DynamicField/Backend/DropdownFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/DynamicField/Backend/TextAreaFromDB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/DynamicField/Backend/MultiselectFromDB.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
</otrs_package>